// WebApplication3/Controllers/ClaimEntriesController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication3.Data;
using WebApplication3.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;

namespace WebApplication3.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ClaimEntriesController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public ClaimEntriesController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<ClaimEntry>>> GetClaimEntries()
        {
            try
            {
                return await _context.ClaimEntries.ToListAsync();
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new
                {
                    Message = "An error occurred while retrieving claim entries.",
                    Details = ex.Message,
                    Type = ex.GetType().Name
                });
            }
        }

        [HttpPost]
        public async Task<ActionResult<ClaimEntry>> PostClaimEntry(ClaimEntry claimEntry)
        {
            try
            {
                // If Id is auto-generated by DB, setting to 0 is fine.
                // If it's not auto-generated, you might need to handle ID assignment.
                if (claimEntry.Id == 0)
                { // Only set if it's a new entry and not provided
                    // For auto-incrementing primary keys, EF Core handles this.
                    // This line might be redundant or problematic if ID is not 0 for new entries
                    // or if you're trying to insert an existing ID.
                    // Let's remove it for now, relying on EF Core's default behavior for auto-incrementing PKs.
                    // claimEntry.Id = 0; // REMOVE THIS LINE
                }


                _context.ClaimEntries.Add(claimEntry);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetClaimEntries), new { id = claimEntry.Id }, claimEntry);
            }
            catch (Exception ex)
            {
                // This is where the deserialization error would manifest.
                // Log the full exception details to your console/logs during debugging.
                Console.WriteLine($"Error in PostClaimEntry: {ex.Message}");
                Console.WriteLine($"Inner Exception: {ex.InnerException?.Message}");
                return StatusCode(StatusCodes.Status500InternalServerError, new
                {
                    Message = "An error occurred while creating the claim entry.",
                    Details = ex.Message,
                    Type = ex.GetType().Name
                });
            }
        }
    }
}